function varargout = watermark(varargin)
    gui_Singleton = 1;
    gui_State = struct('gui_Name',       mfilename, ...
                       'gui_Singleton',  gui_Singleton, ...
                       'gui_OpeningFcn', @watermark_OpeningFcn, ...
                       'gui_OutputFcn',  @watermark_OutputFcn, ...
                       'gui_LayoutFcn',  [] , ...
                       'gui_Callback',   []);
    if nargin && ischar(varargin{1})
        gui_State.gui_Callback = str2func(varargin{1});
    end
    if nargout
        [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
    else
        gui_mainfcn(gui_State, varargin{:});
end

function watermark_OpeningFcn(hObject, eventdata, handles, varargin)
    handles.output = hObject;
    guidata(hObject, handles);
    global key
    if isempty(key)
        key=0;
        global ext_out
        ext_out = 'bmp';
        global w_type
        w_type = 0;
end

function varargout = watermark_OutputFcn(hObject, eventdata, handles) 
    varargout{1} = handles.output;

function sourceimage_Callback(hObject, eventdata, handles)

function sourceimage_CreateFcn(hObject, eventdata, handles)
    if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
        set(hObject,'BackgroundColor','white');
end

function outputimage_Callback(hObject, eventdata, handles)

function outputimage_CreateFcn(hObject, eventdata, handles)
    if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
        set(hObject,'BackgroundColor','white');
end

function rbbmp_Callback(hObject, eventdata, handles)
    global ext_out
    ext_out='bmp';

function rbtiff_Callback(hObject, eventdata, handles)
    global ext_out
    ext_out='tiff';
    
function rbpng_Callback(hObject, eventdata, handles)
    global ext_out
    ext_out='png';



function rbtext_Callback(hObject, eventdata, handles)
    global w_type
    w_type=0; 

function rbimage_Callback(hObject, eventdata, handles)
    global w_type
    w_type=1; 

function insertnumber_Callback(hObject, eventdata, handles)

function insertnumber_CreateFcn(hObject, eventdata, handles)
    if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
        set(hObject,'BackgroundColor','white');
end

function cbkey_Callback(hObject, eventdata, handles)
    global key
    key = 1-key; 

function inserttext_Callback(hObject, eventdata, handles)

function inserttext_CreateFcn(hObject, eventdata, handles)
    if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
        set(hObject,'BackgroundColor','white');
end

%-----Proses Watermark-------%
function insertwatermark_Callback(hObject, eventdata, handles)

    set(handles.proseswatermark, 'String', 'PROSES WATERMARK..');
    img_in = get(handles.sourceimage,'String');

    if isempty(img_in)
        set(handles.proseswatermark, 'String', 'Tidak ada file gambar yang ditentukan');
        return
    end

    img = imread(img_in);
    st  = '';
    watermark = get(handles.inserttext, 'String');

    global key
    global ext_out
    global w_type
    imgw    = 0;
    k_plot  = 1;

    if key == 0
        if w_type == 0
            [imgw st] = watermark_k(img, watermark)
        else
            [imgw st] = watermark_img(img, imread(watermark));
            k_plot = 2;
        end
    else
        if w_type == 0
            [imgw st]=watermark_k(img,watermark,str2num(get(handles.insertnumber,'String'))); %Memanggil fungsi dengan watermark_k kunci
        else
            [imgw st]=watermark_img(img,imread(watermark),str2num(get(handles.insertnumber,'String')));  %Memanggil fungsi dengan watermark_img kunci
            k_plot=2;
        end
    end

    img_out=get(handles.outputimage,'String');                                   %Memperoleh nama file output
    imwrite(imgw,[img_out '.' ext_out],ext_out);                                 %Menulis gambar watermark ke disk
    set(handles.proseswatermark,'String',st);  
       
    %-----Memunculkan Popup-------%
    figure                                                                       %Membuka file gambar baru
    subplot(k_plot,2,1)                                                          %Membuat subplot
    imshow(img)                                                                  %Tampilkan gambar asli
    title(['Gambar Asli: "' img_in '"'])                                         %Judul
    subplot(k_plot,2,2)                                                          %Memilih jendela subplot kedua
    imshow(imgw)                                                                 %Gambar watermark      
    title(['Gambar Ter-Watermark: "' img_out '.' ext_out '"'])                   %Judul

    if w_type==1                                                                 %Jika watermark adalah tipe gambar 
        subplot(2,2,3)                                                           %Membuat subplot
        imshow(watermark)                                                        %Watermark gambar
        title(['Watermark: "' watermark '"'])                                    %Judul
end

function insertwatermark_CreateFcn(hObject, eventdata, handles)

function figure1_CloseRequestFcn(hObject, eventdata, handles)

    clear global key
    clear global ext_out
    clear global w_type

    delete(hObject);


% --- Executes on button press in close.
function close_Callback(hObject, eventdata, handles)
% hObject    handle to close (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

